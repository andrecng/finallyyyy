#!/usr/bin/env python3
"""
Script de diagnostic des probl√®mes de l'environnement
"""

import requests
import subprocess
import time
import os
import json

def check_api_health():
    """V√©rifier la sant√© de l'API"""
    print("üîç DIAGNOSTIC DE L'ENVIRONNEMENT")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ V√©rification de l'API:")
    
    try:
        # Test de sant√©
        response = requests.get("http://localhost:8001/healthz", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ API en ligne sur port 8001")
        else:
            print(f"   ‚ùå API en erreur: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("   ‚ùå API inaccessible sur port 8001")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur API: {e}")
        return False
    
    # Test de simulation
    try:
        response = requests.post(
            "http://localhost:8001/simulate",
            json={"params": {"desired_risk": 0.01, "total_steps": 10}},
            timeout=10
        )
        if response.status_code == 200:
            print("   ‚úÖ Endpoint /simulate fonctionnel")
        else:
            print(f"   ‚ùå /simulate en erreur: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur /simulate: {e}")
    
    return True

def check_frontend():
    """V√©rifier le frontend"""
    print("\n2Ô∏è‚É£ V√©rification du Frontend:")
    
    try:
        response = requests.get("http://localhost:3000", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Frontend accessible sur port 3000")
            if "/workspace" in response.text:
                print("   ‚úÖ Page /workspace d√©tect√©e")
            else:
                print("   ‚ö†Ô∏è  Page /workspace non trouv√©e")
        else:
            print(f"   ‚ùå Frontend en erreur: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("   ‚ùå Frontend inaccessible sur port 3000")
    except Exception as e:
        print(f"   ‚ùå Erreur frontend: {e}")

def check_processes():
    """V√©rifier les processus en cours"""
    print("\n3Ô∏è‚É£ V√©rification des processus:")
    
    try:
        # V√©rifier uvicorn
        result = subprocess.run(
            ["pgrep", "-f", "uvicorn.*backend.main:app"],
            capture_output=True, text=True
        )
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            print(f"   ‚úÖ Uvicorn en cours: {len(pids)} processus")
            for pid in pids:
                if pid:
                    print(f"      PID {pid}")
        else:
            print("   ‚ùå Aucun processus uvicorn trouv√©")
        
        # V√©rifier next
        result = subprocess.run(
            ["pgrep", "-f", "next dev"],
            capture_output=True, text=True
        )
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            print(f"   ‚úÖ Next.js en cours: {len(pids)} processus")
            for pid in pids:
                if pid:
                    print(f"      PID {pid}")
        else:
            print("   ‚ùå Aucun processus Next.js trouv√©")
            
    except Exception as e:
        print(f"   ‚ùå Erreur v√©rification processus: {e}")

def check_ports():
    """V√©rifier l'utilisation des ports"""
    print("\n4Ô∏è‚É£ V√©rification des ports:")
    
    ports = [3000, 8001]
    for port in ports:
        try:
            result = subprocess.run(
                ["lsof", "-ti", f":{port}"],
                capture_output=True, text=True
            )
            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                print(f"   üî¥ Port {port} occup√© par {len(pids)} processus")
                for pid in pids:
                    if pid:
                        print(f"      PID {pid}")
            else:
                print(f"   üü¢ Port {port} libre")
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification port {port}: {e}")

def check_file_changes():
    """V√©rifier les modifications r√©centes de fichiers"""
    print("\n5Ô∏è‚É£ Modifications r√©centes de fichiers:")
    
    try:
        # V√©rifier les modifications dans les 5 derni√®res minutes
        result = subprocess.run(
            ["find", ".", "-name", "*.py", "-mmin", "-5"],
            capture_output=True, text=True
        )
        if result.returncode == 0 and result.stdout.strip():
            files = result.stdout.strip().split('\n')
            print(f"   üìù {len(files)} fichiers Python modifi√©s r√©cemment:")
            for file in files[:5]:  # Limiter √† 5 fichiers
                if file:
                    print(f"      {file}")
        else:
            print("   ‚úÖ Aucun fichier Python modifi√© r√©cemment")
            
    except Exception as e:
        print(f"   ‚ùå Erreur v√©rification fichiers: {e}")

def check_performance():
    """V√©rifier les performances de l'API"""
    print("\n6Ô∏è‚É£ Test de performance:")
    
    try:
        start_time = time.time()
        response = requests.post(
            "http://localhost:8001/simulate",
            json={"params": {"desired_risk": 0.01, "total_steps": 20}},
            timeout=10
        )
        end_time = time.time()
        
        if response.status_code == 200:
            duration = (end_time - start_time) * 1000
            print(f"   ‚ö° Temps de r√©ponse: {duration:.1f}ms")
            
            if duration < 100:
                print("   üöÄ Performance excellente")
            elif duration < 500:
                print("   ‚úÖ Performance correcte")
            else:
                print("   ‚ö†Ô∏è  Performance d√©grad√©e")
        else:
            print(f"   ‚ùå Erreur performance: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur test performance: {e}")

def main():
    """Diagnostic principal"""
    print("üöÄ DIAGNOSTIC COMPLET DE L'ENVIRONNEMENT")
    print("=" * 60)
    
    # V√©rifications de base
    api_ok = check_api_health()
    check_frontend()
    check_processes()
    check_ports()
    check_file_changes()
    check_performance()
    
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DU DIAGNOSTIC")
    
    if api_ok:
        print("‚úÖ API fonctionnelle")
        print("‚úÖ Environnement stable")
        print("\nüí° Pour tester l'interface:")
        print("   Ouvrez http://localhost:3000/workspace")
    else:
        print("‚ùå Probl√®mes d√©tect√©s")
        print("\nüîß Actions recommand√©es:")
        print("   1. npm run kill:ports")
        print("   2. npm run dev")
        print("   3. V√©rifier les logs pour erreurs")

if __name__ == "__main__":
    main()
