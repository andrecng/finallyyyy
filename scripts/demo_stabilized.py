#!/usr/bin/env python3
"""
D√©monstration de l'environnement stabilis√©
"""

import requests
import json
import time

def demo_stabilized_environment():
    """D√©monstration compl√®te de l'environnement stabilis√©"""
    
    base_url = "http://localhost:8001"
    
    print("üöÄ D√âMONSTRATION ENVIRONNEMENT STABILIS√â")
    print("=" * 60)
    
    # Test 1: V√©rification de la sant√©
    print("\n1Ô∏è‚É£ Test de sant√© de l'API:")
    try:
        response = requests.get(f"{base_url}/healthz")
        if response.status_code == 200:
            print("   ‚úÖ API en ligne et fonctionnelle")
        else:
            print(f"   ‚ùå API en erreur: {response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Impossible de contacter l'API: {e}")
        return
    
    # Test 2: Simulation avec t√©l√©metrie normalis√©e
    print("\n2Ô∏è‚É£ Test simulation avec t√©l√©metrie:")
    
    params = {
        "desired_risk": 0.015,
        "total_steps": 50,
        "daily_limit": 0.025,
        "cppi_alpha": 0.12,
        "vt_target_vol": 0.008,
        "modules": ["FTMOGate", "CPPI", "VolTarget", "SoftBarrier"]
    }
    
    try:
        response = requests.post(f"{base_url}/simulate", json={"params": params})
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Simulation r√©ussie: {len(data.get('series', []))} points")
            
            # V√©rifier la t√©l√©metrie normalis√©e
            logs = data.get('logs', [])
            if logs:
                last_log = logs[-1]
                print(f"   üìä T√©l√©metrie normalis√©e:")
                
                # V√©rifier que toutes les cl√©s sont pr√©sentes
                expected_keys = [
                    'cppi_cap_mult', 'cppi_freeze', 'vt_sigma', 'vt_cap',
                    'sb_dd', 'sb_mult', 'ftmo_lmax_dyn', 'ftmo_budget_day_left'
                ]
                
                for key in expected_keys:
                    value = last_log.get(key)
                    status = "‚úÖ" if key in last_log else "‚ùå"
                    print(f"      {status} {key}: {value}")
                
                # V√©rifier la structure des logs
                print(f"   üìã Structure des logs: {list(last_log.keys())}")
                
        else:
            print(f"   ‚ùå Erreur simulation: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test 3: Monte Carlo avec environnement stable
    print("\n3Ô∏è‚É£ Test Monte Carlo stable:")
    
    try:
        response = requests.post(f"{base_url}/mc_simulate", json={
            "params": params,
            "n_runs": 50,
            "seed": 42
        })
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ MC r√©ussi: {data['n_runs']} runs")
            
            if 'metrics' in data:
                metrics = data['metrics']
                if 'max_dd' in metrics:
                    max_dd = metrics['max_dd']
                    print(f"   üìä MaxDD: p05={max_dd.get('p05', 'N/A'):.6f}, p50={max_dd.get('p50', 'N/A'):.6f}, p95={max_dd.get('p95', 'N/A'):.6f}")
                    
        else:
            print(f"   ‚ùå Erreur MC: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test 4: V√©rification des performances
    print("\n4Ô∏è‚É£ Test de performance:")
    
    start_time = time.time()
    try:
        response = requests.post(f"{base_url}/simulate", json={"params": params})
        end_time = time.time()
        
        if response.status_code == 200:
            duration = (end_time - start_time) * 1000  # en ms
            print(f"   ‚ö° Temps de r√©ponse: {duration:.1f}ms")
            
            if duration < 100:
                print("   üöÄ Performance excellente")
            elif duration < 500:
                print("   ‚úÖ Performance correcte")
            else:
                print("   ‚ö†Ô∏è  Performance √† surveiller")
                
        else:
            print(f"   ‚ùå Erreur: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ D√âMONSTRATION TERMIN√âE !")
    print("\nüí° Environnement stabilis√© avec:")
    print("   ‚úÖ API FastAPI sur port 8001")
    print("   ‚úÖ Frontend Next.js sur port 3000")
    print("   ‚úÖ T√©l√©metrie normalis√©e et coh√©rente")
    print("   ‚úÖ Tests automatis√©s fonctionnels")
    print("   ‚úÖ Scripts de nettoyage des ports")
    print("   ‚úÖ Configuration d'environnement propre")
    print("\nüåê Interface pr√™te sur: http://localhost:3000/workspace")
    print("üîß API pr√™te sur: http://localhost:8001")

if __name__ == "__main__":
    demo_stabilized_environment()
