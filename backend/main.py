from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Optional
import numpy as np
import talib
import json
from datetime import datetime, timedelta

app = FastAPI(
    title="üéØ Laboratoire de Simulation Trading",
    description="""
    ## üöÄ API de Simulation Monte-Carlo pour le Trading
    
    ### üìä Que fait cette API ?
    Cette API vous permet de lancer des **simulations Monte-Carlo** pour analyser vos strat√©gies de trading.
    
    ### üé≤ Comment √ßa marche ?
    1. **Configurez vos param√®tres** (capital, risque, taux de gain)
    2. **Lancez la simulation** (1000+ sc√©narios possibles)
    3. **Analysez les r√©sultats** (rendements, risques, drawdowns)
    
    ### üìà Indicateurs Techniques
    Acc√©dez √† **158 indicateurs techniques** (RSI, MACD, Bollinger Bands, etc.)
    
    ---
    **D√©velopp√© pour 2048 Asset Management** üéØ
    """,
    version="1.0.0",
    contact={
        "name": "2048 Asset Management",
        "url": "https://github.com/andrecng/finallyyyy",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# Configuration CORS pour permettre les requ√™tes depuis le frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3001", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les de donn√©es
class SimulationRequest(BaseModel):
    initial_capital: float = Field(
        default=100000,
        description="üí∞ Capital initial en euros (ex: 100000)",
        example=100000,
        ge=1000,
        le=10000000
    )
    risk_per_trade: float = Field(
        default=2.0,
        description="‚ö†Ô∏è Risque par trade en pourcentage (ex: 2.0 = 2%)",
        example=2.0,
        ge=0.1,
        le=10.0
    )
    win_rate: float = Field(
        default=0.55,
        description="üéØ Taux de gain entre 0 et 1 (ex: 0.55 = 55% de trades gagnants)",
        example=0.55,
        ge=0.1,
        le=0.9
    )
    avg_win: float = Field(
        default=2.5,
        description="üìà Gain moyen en unit√©s R (ex: 2.5 = gain de 2.5x le risque)",
        example=2.5,
        ge=0.5,
        le=10.0
    )
    avg_loss: float = Field(
        default=1.5,
        description="üìâ Perte moyenne en unit√©s R (ex: 1.5 = perte de 1.5x le risque)",
        example=1.5,
        ge=0.5,
        le=5.0
    )
    num_trades: int = Field(
        default=100,
        description="üîÑ Nombre de trades √† simuler (ex: 100)",
        example=100,
        ge=10,
        le=1000
    )
    num_simulations: int = Field(
        default=1000,
        description="üé≤ Nombre de simulations Monte-Carlo (ex: 1000)",
        example=1000,
        ge=100,
        le=10000
    )
    
    class Config:
        schema_extra = {
            "example": {
                "initial_capital": 100000,
                "risk_per_trade": 2.0,
                "win_rate": 0.55,
                "avg_win": 2.5,
                "avg_loss": 1.5,
                "num_trades": 100,
                "num_simulations": 1000
            }
        }

class SimulationResult(BaseModel):
    simulation_id: str
    final_capital: float
    max_drawdown: float
    sharpe_ratio: float
    total_return: float
    trades: List[dict]
    equity_curve: List[float]
    timestamp: str

class MonteCarloResult(BaseModel):
    simulations: List[SimulationResult]
    statistics: dict
    percentiles: dict

# Stockage temporaire des simulations (en production, utiliser une base de donn√©es)
simulations_db = {}
active_simulations = {}  # Pour g√©rer l'arr√™t des simulations

@app.get("/")
async def root():
    """
    üéØ **Bienvenue dans le Laboratoire de Simulation Trading**
    
    ### üöÄ Endpoints principaux :
    - **`/simulate/monte-carlo`** : Simulations Monte-Carlo
    - **`/indicators/technical`** : Liste des indicateurs
    - **`/indicators/calculate`** : Calcul d'indicateurs
    - **`/docs`** : Documentation interactive (cette page)
    
    ### üìö Guide rapide :
    1. **Allez sur `/docs`** pour l'interface interactive
    2. **Testez une simulation** avec des param√®tres simples
    3. **Explorez les indicateurs** techniques disponibles
    
    ### üé≤ Exemple de simulation :
    ```json
    {
      "initial_capital": 10000,
      "risk_per_trade": 1.0,
      "win_rate": 0.55,
      "avg_win": 2.0,
      "avg_loss": 1.0,
      "num_trades": 50,
      "num_simulations": 100
    }
    ```
    """
    return {
        "message": "üéØ Laboratoire de Simulation Trading - 2048 Asset Management",
        "status": "running",
        "version": "1.0.0",
        "features": [
            "Simulations Monte-Carlo",
            "158 Indicateurs Techniques",
            "Analyse de Risque",
            "API REST Compl√®te"
        ],
        "quick_start": "/docs",
        "documentation": "Interface interactive avec exemples"
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/simulate/stop/{simulation_id}")
async def stop_simulation(simulation_id: str):
    """
    üõë **Arr√™ter une Simulation**
    
    Arr√™te une simulation Monte-Carlo en cours d'ex√©cution.
    
    ### üí° Utilisation :
    - Utilisez l'ID de simulation retourn√© par `/simulate/monte-carlo`
    - La simulation s'arr√™tera progressivement
    - Les r√©sultats partiels seront retourn√©s
    """
    if simulation_id in active_simulations:
        active_simulations[simulation_id] = False
        return {"message": f"Simulation {simulation_id} en cours d'arr√™t", "status": "stopping"}
    else:
        raise HTTPException(status_code=404, detail="Simulation non trouv√©e")

@app.post("/simulate/monte-carlo", response_model=MonteCarloResult)
async def run_monte_carlo_simulation(request: SimulationRequest):
    """
    üé≤ **Simulation Monte-Carlo pour le Trading**
    
    Lance une simulation Monte-Carlo compl√®te pour analyser votre strat√©gie de trading.
    
    ### üìä Ce que vous obtenez :
    - **Simulations par √©tapes** avec progression en temps r√©el
    - **Statistiques globales** (moyennes, percentiles)
    - **M√©triques de risque** (drawdown, Sharpe ratio)
    - **Courbes d'√©quit√©** pour chaque simulation
    
    ### ‚ö° Temps d'ex√©cution optimis√© :
    - **100 simulations** : ~1-2 secondes
    - **1000 simulations** : ~3-5 secondes
    - **10000 simulations** : ~10-15 secondes
    
    ### üí° Conseils d'utilisation :
    - Commencez avec **100 simulations** pour tester
    - Utilisez **1000+ simulations** pour des r√©sultats fiables
    - **Arr√™tez** si c'est trop long avec le bouton stop
    """
    try:
        # G√©n√©ration d'un ID unique pour cette session de simulation
        session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        active_simulations[session_id] = True
        
        simulations = []
        
        # Optimisation : simulations par √©tapes avec possibilit√© d'arr√™t
        batch_size = min(100, request.num_simulations)  # Traite par lots de 100
        
        for sim_idx in range(0, request.num_simulations, batch_size):
            # V√©rification si la simulation doit s'arr√™ter
            if not active_simulations.get(session_id, True):
                break
                
            end_idx = min(sim_idx + batch_size, request.num_simulations)
            
            for batch_sim_idx in range(sim_idx, end_idx):
                # G√©n√©ration de trades al√©atoires bas√©s sur les param√®tres
                trades = generate_random_trades(
                    request.num_trades,
                    request.win_rate,
                    request.avg_win,
                    request.avg_loss
                )
                
                # Calcul de la courbe d'√©quit√©
                equity_curve = calculate_equity_curve(
                    request.initial_capital,
                    trades,
                    request.risk_per_trade
                )
                
                # Calcul des m√©triques
                final_capital = equity_curve[-1]
                max_drawdown = calculate_max_drawdown(equity_curve)
                sharpe_ratio = calculate_sharpe_ratio(equity_curve)
                total_return = (final_capital - request.initial_capital) / request.initial_capital
                
                # Cr√©ation du r√©sultat de simulation
                sim_result = SimulationResult(
                    simulation_id=f"sim_{batch_sim_idx}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                    final_capital=final_capital,
                    max_drawdown=max_drawdown,
                    sharpe_ratio=sharpe_ratio,
                    total_return=total_return,
                    trades=trades,
                    equity_curve=equity_curve,
                    timestamp=datetime.now().isoformat()
                )
                
                simulations.append(sim_result)
                
                # V√©rification d'arr√™t apr√®s chaque simulation
                if not active_simulations.get(session_id, True):
                    break
        
        # Calcul des statistiques globales
        final_capitals = [sim.final_capital for sim in simulations]
        max_drawdowns = [sim.max_drawdown for sim in simulations]
        sharpe_ratios = [sim.sharpe_ratio for sim in simulations]
        total_returns = [sim.total_return for sim in simulations]
        
        statistics = {
            "mean_final_capital": np.mean(final_capitals),
            "std_final_capital": np.std(final_capitals),
            "mean_max_drawdown": np.mean(max_drawdowns),
            "mean_sharpe_ratio": np.mean(sharpe_ratios),
            "mean_total_return": np.mean(total_returns),
            "success_rate": len([r for r in total_returns if r > 0]) / len(total_returns)
        }
        
        # Calcul des percentiles
        percentiles = {
            "p5_final_capital": np.percentile(final_capitals, 5),
            "p25_final_capital": np.percentile(final_capitals, 25),
            "p50_final_capital": np.percentile(final_capitals, 50),
            "p75_final_capital": np.percentile(final_capitals, 75),
            "p95_final_capital": np.percentile(final_capitals, 95),
            "worst_case": np.min(final_capitals),
            "best_case": np.max(final_capitals)
        }
        
        # Nettoyage de la session
        if session_id in active_simulations:
            del active_simulations[session_id]
        
        return MonteCarloResult(
            simulations=simulations,
            statistics=statistics,
            percentiles=percentiles
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la simulation: {str(e)}")

def generate_random_trades(num_trades: int, win_rate: float, avg_win: float, avg_loss: float) -> List[dict]:
    """G√©n√®re des trades al√©atoires bas√©s sur les param√®tres"""
    trades = []
    
    for i in range(num_trades):
        is_win = np.random.random() < win_rate
        
        if is_win:
            # Win avec variation autour de la moyenne
            pnl = avg_win * (1 + np.random.normal(0, 0.2))
        else:
            # Loss avec variation autour de la moyenne
            pnl = -avg_loss * (1 + np.random.normal(0, 0.2))
        
        trades.append({
            "trade_id": i,
            "pnl": pnl,
            "is_win": is_win,
            "timestamp": (datetime.now() + timedelta(days=i)).isoformat()
        })
    
    return trades

def calculate_equity_curve(initial_capital: float, trades: List[dict], risk_per_trade: float) -> List[float]:
    """Calcule la courbe d'√©quit√© bas√©e sur les trades"""
    equity_curve = [initial_capital]
    current_capital = initial_capital
    
    for trade in trades:
        # Application du risque par trade (risk_per_trade est en %)
        risk_amount = current_capital * (risk_per_trade / 100)
        trade_impact = trade["pnl"] * risk_amount
        
        current_capital += trade_impact
        equity_curve.append(current_capital)
    
    return equity_curve

def calculate_max_drawdown(equity_curve: List[float]) -> float:
    """Calcule le drawdown maximum"""
    if len(equity_curve) < 2:
        return 0
    
    peak = equity_curve[0]
    max_dd = 0
    
    for value in equity_curve:
        if value > peak:
            peak = value
        dd = (peak - value) / peak
        if dd > max_dd:
            max_dd = dd
    
    return max_dd

def calculate_sharpe_ratio(equity_curve: List[float], risk_free_rate: float = 0.02) -> float:
    """Calcule le ratio de Sharpe (simplifi√©)"""
    if len(equity_curve) < 2:
        return 0
    
    returns = np.diff(equity_curve) / equity_curve[:-1]
    
    if len(returns) == 0:
        return 0
    
    excess_returns = returns - risk_free_rate / 252  # Taux journalier
    return np.mean(excess_returns) / np.std(excess_returns) if np.std(excess_returns) > 0 else 0

@app.get("/indicators/technical")
async def get_technical_indicators():
    """
    üìà **Indicateurs Techniques Disponibles**
    
    Retourne la liste compl√®te des **158 indicateurs techniques** disponibles via TA-Lib.
    
    ### üéØ Cat√©gories d'indicateurs :
    - **Moyennes mobiles** : SMA, EMA, WMA
    - **Oscillateurs** : RSI, Stochastic, Williams %R
    - **Volatilit√©** : Bollinger Bands, ATR, Keltner
    - **Tendance** : MACD, ADX, Parabolic SAR
    - **Volume** : OBV, VWAP, Money Flow
    
    ### üí° Utilisation :
    - Consultez la liste pour voir tous les indicateurs
    - Utilisez `/indicators/calculate` pour calculer des indicateurs
    """
    try:
        functions = talib.get_functions()
        function_groups = talib.get_function_groups()
        
        return {
            "total_indicators": len(functions),
            "indicators": functions,
            "groups": function_groups
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration des indicateurs: {str(e)}")

@app.post("/indicators/calculate")
async def calculate_indicators(data: dict):
    """Calcule des indicateurs techniques sur des donn√©es OHLCV"""
    try:
        # Exemple avec quelques indicateurs populaires
        ohlc_data = data.get("ohlc", [])
        if not ohlc_data:
            raise ValueError("Donn√©es OHLC requises")
        
        # Extraction des donn√©es
        opens = np.array([float(candle["open"]) for candle in ohlc_data])
        highs = np.array([float(candle["high"]) for candle in ohlc_data])
        lows = np.array([float(candle["low"]) for candle in ohlc_data])
        closes = np.array([float(candle["close"]) for candle in ohlc_data])
        volumes = np.array([float(candle["volume"]) for candle in ohlc_data])
        
        # Calcul des indicateurs
        indicators = {}
        
        # Moyennes mobiles
        indicators["sma_20"] = talib.SMA(closes, timeperiod=20).tolist()
        indicators["ema_20"] = talib.EMA(closes, timeperiod=20).tolist()
        
        # RSI
        indicators["rsi"] = talib.RSI(closes, timeperiod=14).tolist()
        
        # MACD
        macd, macd_signal, macd_hist = talib.MACD(closes)
        indicators["macd"] = macd.tolist()
        indicators["macd_signal"] = macd_signal.tolist()
        indicators["macd_histogram"] = macd_hist.tolist()
        
        # Bollinger Bands
        bb_upper, bb_middle, bb_lower = talib.BBANDS(closes)
        indicators["bb_upper"] = bb_upper.tolist()
        indicators["bb_middle"] = bb_middle.tolist()
        indicators["bb_lower"] = bb_lower.tolist()
        
        # Stochastic
        slowk, slowd = talib.STOCH(highs, lows, closes)
        indicators["stoch_k"] = slowk.tolist()
        indicators["stoch_d"] = slowd.tolist()
        
        return {
            "indicators": indicators,
            "data_points": len(closes),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors du calcul des indicateurs: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
